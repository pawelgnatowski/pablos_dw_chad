(function () {
  'use strict';

  // src/injected_scripts/injected_script.ts
  const SCRIPT_SOURCE = 'pablos-dw-chad-injected-script';
  function pollForDatawalkInfo(timeout = 15000, interval = 500) {
      console.log(`${SCRIPT_SOURCE}: Starting to poll for DataWalk app version. Base URL will be window.location.origin.`);
      return new Promise((resolve) => {
          let elapsedTime = 0;
          const timer = setInterval(() => {
              if (window.DATAWALK_APP_VERSION && typeof window.DATAWALK_APP_VERSION === 'string') {
                  clearInterval(timer);
                  const baseUrl = window.location.origin;
                  console.log(`${SCRIPT_SOURCE}: Found DataWalk app version:`, { version: window.DATAWALK_APP_VERSION, baseUrl });
                  resolve({
                      version: window.DATAWALK_APP_VERSION,
                      baseUrl: baseUrl,
                  });
              }
              else {
                  elapsedTime += interval;
                  if (elapsedTime >= timeout) {
                      clearInterval(timer);
                      console.warn(`${SCRIPT_SOURCE}: Timed out waiting for DATAWALK_APP_VERSION.`);
                      resolve(null); // Resolve with null if version not found, baseUrl will still be sent if needed later
                  }
              }
          }, interval);
      });
  }
  async function sendDatawalkInfoToContentScript() {
      const datawalkInfo = await pollForDatawalkInfo();
      if (datawalkInfo && datawalkInfo.version) {
          window.postMessage({
              type: 'DATAWALK_APP_INFO',
              version: datawalkInfo.version,
              baseUrl: datawalkInfo.baseUrl, // This is now window.location.origin
              source: SCRIPT_SOURCE,
          }, window.location.origin // Post to specific origin for better security
          );
          console.log(`${SCRIPT_SOURCE}: Sent DATAWALK_APP_INFO to content script.`);
      }
      else {
          window.postMessage({
              type: 'DATAWALK_APP_INFO_NOT_FOUND',
              source: SCRIPT_SOURCE,
              // Optionally, could still send baseUrl if that's useful even without app version
              // baseUrl: window.location.origin 
          }, window.location.origin);
          console.log(`${SCRIPT_SOURCE}: Sent DATAWALK_APP_INFO_NOT_FOUND to content script (app version not found).`);
      }
  }
  // Execute the function to send info back to the content script
  function initPolling() {
      console.log(`${SCRIPT_SOURCE}: Initializing polling for DataWalk info.`);
      sendDatawalkInfoToContentScript();
  }
  // Try to start polling after the DOM is ready, with a small delay to allow
  // the host page's scripts (like DataWalk's) to potentially set the global variables.
  if (document.readyState === 'interactive' || document.readyState === 'complete') {
      console.log(`${SCRIPT_SOURCE}: Document readyState is '${document.readyState}'. Scheduling polling init with a 500ms delay.`);
      setTimeout(initPolling, 500);
  }
  else {
      console.log(`${SCRIPT_SOURCE}: Document not ready. Adding DOMContentLoaded listener for polling init.`);
      document.addEventListener('DOMContentLoaded', () => {
          console.log(`${SCRIPT_SOURCE}: DOMContentLoaded event fired. Scheduling polling init with a 500ms delay.`);
          setTimeout(initPolling, 500);
      }, { once: true });
  }

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0ZWRfc2NyaXB0LmpzIiwic291cmNlcyI6WyIuLi9zcmMvaW5qZWN0ZWRfc2NyaXB0cy9pbmplY3RlZF9zY3JpcHQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2luamVjdGVkX3NjcmlwdHMvaW5qZWN0ZWRfc2NyaXB0LnRzXG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgREFUQVdBTEtfQVBQX1ZFUlNJT04/OiBzdHJpbmc7XG4gICAgLy8gYmFzZVVybD86IHN0cmluZzsgLy8gTm8gbG9uZ2VyIHJlbHlpbmcgb24gdGhpcyBnbG9iYWxcbiAgICAvLyBQb3RlbnRpYWxseSBvdGhlciBEYXRhV2FsayBzcGVjaWZpYyBnbG9iYWwgdmFyaWFibGVzIGlmIG5lZWRlZFxuICB9XG59XG5cbmNvbnN0IFNDUklQVF9TT1VSQ0UgPSAncGFibG9zLWR3LWNoYWQtaW5qZWN0ZWQtc2NyaXB0JztcblxuZnVuY3Rpb24gcG9sbEZvckRhdGF3YWxrSW5mbyh0aW1lb3V0ID0gMTUwMDAsIGludGVydmFsID0gNTAwKTogUHJvbWlzZTx7IHZlcnNpb246IHN0cmluZzsgYmFzZVVybDogc3RyaW5nIH0gfCBudWxsPiB7XG4gIGNvbnNvbGUubG9nKGAke1NDUklQVF9TT1VSQ0V9OiBTdGFydGluZyB0byBwb2xsIGZvciBEYXRhV2FsayBhcHAgdmVyc2lvbi4gQmFzZSBVUkwgd2lsbCBiZSB3aW5kb3cubG9jYXRpb24ub3JpZ2luLmApO1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBsZXQgZWxhcHNlZFRpbWUgPSAwO1xuICAgIGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgaWYgKHdpbmRvdy5EQVRBV0FMS19BUFBfVkVSU0lPTiAmJiB0eXBlb2Ygd2luZG93LkRBVEFXQUxLX0FQUF9WRVJTSU9OID09PSAnc3RyaW5nJykge1xuICAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAgICAgICAgY29uc3QgYmFzZVVybCA9IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW47XG4gICAgICAgIGNvbnNvbGUubG9nKGAke1NDUklQVF9TT1VSQ0V9OiBGb3VuZCBEYXRhV2FsayBhcHAgdmVyc2lvbjpgLCB7IHZlcnNpb246IHdpbmRvdy5EQVRBV0FMS19BUFBfVkVSU0lPTiwgYmFzZVVybCB9KTtcbiAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgdmVyc2lvbjogd2luZG93LkRBVEFXQUxLX0FQUF9WRVJTSU9OLFxuICAgICAgICAgIGJhc2VVcmw6IGJhc2VVcmwsXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxhcHNlZFRpbWUgKz0gaW50ZXJ2YWw7XG4gICAgICAgIGlmIChlbGFwc2VkVGltZSA+PSB0aW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gICAgICAgICAgY29uc29sZS53YXJuKGAke1NDUklQVF9TT1VSQ0V9OiBUaW1lZCBvdXQgd2FpdGluZyBmb3IgREFUQVdBTEtfQVBQX1ZFUlNJT04uYCk7XG4gICAgICAgICAgcmVzb2x2ZShudWxsKTsgLy8gUmVzb2x2ZSB3aXRoIG51bGwgaWYgdmVyc2lvbiBub3QgZm91bmQsIGJhc2VVcmwgd2lsbCBzdGlsbCBiZSBzZW50IGlmIG5lZWRlZCBsYXRlclxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgaW50ZXJ2YWwpO1xuICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2VuZERhdGF3YWxrSW5mb1RvQ29udGVudFNjcmlwdCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgZGF0YXdhbGtJbmZvID0gYXdhaXQgcG9sbEZvckRhdGF3YWxrSW5mbygpO1xuICBpZiAoZGF0YXdhbGtJbmZvICYmIGRhdGF3YWxrSW5mby52ZXJzaW9uKSB7XG4gICAgd2luZG93LnBvc3RNZXNzYWdlKFxuICAgICAge1xuICAgICAgICB0eXBlOiAnREFUQVdBTEtfQVBQX0lORk8nLFxuICAgICAgICB2ZXJzaW9uOiBkYXRhd2Fsa0luZm8udmVyc2lvbixcbiAgICAgICAgYmFzZVVybDogZGF0YXdhbGtJbmZvLmJhc2VVcmwsIC8vIFRoaXMgaXMgbm93IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW5cbiAgICAgICAgc291cmNlOiBTQ1JJUFRfU09VUkNFLFxuICAgICAgfSxcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gLy8gUG9zdCB0byBzcGVjaWZpYyBvcmlnaW4gZm9yIGJldHRlciBzZWN1cml0eVxuICAgICk7XG4gICAgY29uc29sZS5sb2coYCR7U0NSSVBUX1NPVVJDRX06IFNlbnQgREFUQVdBTEtfQVBQX0lORk8gdG8gY29udGVudCBzY3JpcHQuYCk7XG4gIH0gZWxzZSB7XG4gICAgIHdpbmRvdy5wb3N0TWVzc2FnZShcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ0RBVEFXQUxLX0FQUF9JTkZPX05PVF9GT1VORCcsXG4gICAgICAgIHNvdXJjZTogU0NSSVBUX1NPVVJDRSxcbiAgICAgICAgLy8gT3B0aW9uYWxseSwgY291bGQgc3RpbGwgc2VuZCBiYXNlVXJsIGlmIHRoYXQncyB1c2VmdWwgZXZlbiB3aXRob3V0IGFwcCB2ZXJzaW9uXG4gICAgICAgIC8vIGJhc2VVcmw6IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gXG4gICAgICB9LFxuICAgICAgd2luZG93LmxvY2F0aW9uLm9yaWdpblxuICAgICk7XG4gICAgY29uc29sZS5sb2coYCR7U0NSSVBUX1NPVVJDRX06IFNlbnQgREFUQVdBTEtfQVBQX0lORk9fTk9UX0ZPVU5EIHRvIGNvbnRlbnQgc2NyaXB0IChhcHAgdmVyc2lvbiBub3QgZm91bmQpLmApO1xuICB9XG59XG5cbi8vIEV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHRvIHNlbmQgaW5mbyBiYWNrIHRvIHRoZSBjb250ZW50IHNjcmlwdFxuZnVuY3Rpb24gaW5pdFBvbGxpbmcoKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coYCR7U0NSSVBUX1NPVVJDRX06IEluaXRpYWxpemluZyBwb2xsaW5nIGZvciBEYXRhV2FsayBpbmZvLmApO1xuICAgIHNlbmREYXRhd2Fsa0luZm9Ub0NvbnRlbnRTY3JpcHQoKTtcbn1cblxuLy8gVHJ5IHRvIHN0YXJ0IHBvbGxpbmcgYWZ0ZXIgdGhlIERPTSBpcyByZWFkeSwgd2l0aCBhIHNtYWxsIGRlbGF5IHRvIGFsbG93XG4vLyB0aGUgaG9zdCBwYWdlJ3Mgc2NyaXB0cyAobGlrZSBEYXRhV2FsaydzKSB0byBwb3RlbnRpYWxseSBzZXQgdGhlIGdsb2JhbCB2YXJpYWJsZXMuXG5pZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2ludGVyYWN0aXZlJyB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgY29uc29sZS5sb2coYCR7U0NSSVBUX1NPVVJDRX06IERvY3VtZW50IHJlYWR5U3RhdGUgaXMgJyR7ZG9jdW1lbnQucmVhZHlTdGF0ZX0nLiBTY2hlZHVsaW5nIHBvbGxpbmcgaW5pdCB3aXRoIGEgNTAwbXMgZGVsYXkuYCk7XG4gICAgc2V0VGltZW91dChpbml0UG9sbGluZywgNTAwKTtcbn0gZWxzZSB7XG4gICAgY29uc29sZS5sb2coYCR7U0NSSVBUX1NPVVJDRX06IERvY3VtZW50IG5vdCByZWFkeS4gQWRkaW5nIERPTUNvbnRlbnRMb2FkZWQgbGlzdGVuZXIgZm9yIHBvbGxpbmcgaW5pdC5gKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgJHtTQ1JJUFRfU09VUkNFfTogRE9NQ29udGVudExvYWRlZCBldmVudCBmaXJlZC4gU2NoZWR1bGluZyBwb2xsaW5nIGluaXQgd2l0aCBhIDUwMG1zIGRlbGF5LmApO1xuICAgICAgICBzZXRUaW1lb3V0KGluaXRQb2xsaW5nLCA1MDApO1xuICAgIH0sIHsgb25jZTogdHJ1ZSB9KTtcbn1cblxuLy8gY29uc29sZS5sb2coYFBBQkxPJ1MgRFcgQ0hBRDogSW5qZWN0ZWQgc2NyaXB0IGV4ZWN1dGVkIGFuZCBwb2xsaW5nIHN0YXJ0ZWQuYCk7IC8vIFJlcGxhY2VkIGJ5IG1vcmUgc3BlY2lmaWMgbG9nc1xuXG5leHBvcnQge307IC8vIEVuc3VyZXMgdGhpcyBmaWxlIGlzIHRyZWF0ZWQgYXMgYSBtb2R1bGVcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7RUFBQTtFQVVBLE1BQU0sYUFBYSxHQUFHLGdDQUFnQztFQUV0RCxTQUFTLG1CQUFtQixDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsUUFBUSxHQUFHLEdBQUcsRUFBQTtFQUMxRCxJQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxhQUFhLENBQUEscUZBQUEsQ0FBdUYsQ0FBQztFQUNwSCxJQUFBLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEtBQUk7VUFDN0IsSUFBSSxXQUFXLEdBQUcsQ0FBQztFQUNuQixRQUFBLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxNQUFLO2NBQzdCLElBQUksTUFBTSxDQUFDLG9CQUFvQixJQUFJLE9BQU8sTUFBTSxDQUFDLG9CQUFvQixLQUFLLFFBQVEsRUFBRTtrQkFDbEYsYUFBYSxDQUFDLEtBQUssQ0FBQztFQUNwQixnQkFBQSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU07RUFDdEMsZ0JBQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFHLEVBQUEsYUFBYSwrQkFBK0IsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsb0JBQW9CLEVBQUUsT0FBTyxFQUFFLENBQUM7RUFDL0csZ0JBQUEsT0FBTyxDQUFDO3NCQUNOLE9BQU8sRUFBRSxNQUFNLENBQUMsb0JBQW9CO0VBQ3BDLG9CQUFBLE9BQU8sRUFBRSxPQUFPO0VBQ2pCLGlCQUFBLENBQUM7O21CQUNHO2tCQUNMLFdBQVcsSUFBSSxRQUFRO0VBQ3ZCLGdCQUFBLElBQUksV0FBVyxJQUFJLE9BQU8sRUFBRTtzQkFDMUIsYUFBYSxDQUFDLEtBQUssQ0FBQztFQUNwQixvQkFBQSxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsYUFBYSxDQUFBLDZDQUFBLENBQStDLENBQUM7RUFDN0Usb0JBQUEsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDOzs7V0FHbkIsRUFBRSxRQUFRLENBQUM7RUFDZCxLQUFDLENBQUM7RUFDSjtFQUVBLGVBQWUsK0JBQStCLEdBQUE7RUFDNUMsSUFBQSxNQUFNLFlBQVksR0FBRyxNQUFNLG1CQUFtQixFQUFFO0VBQ2hELElBQUEsSUFBSSxZQUFZLElBQUksWUFBWSxDQUFDLE9BQU8sRUFBRTtVQUN4QyxNQUFNLENBQUMsV0FBVyxDQUNoQjtFQUNFLFlBQUEsSUFBSSxFQUFFLG1CQUFtQjtjQUN6QixPQUFPLEVBQUUsWUFBWSxDQUFDLE9BQU87RUFDN0IsWUFBQSxPQUFPLEVBQUUsWUFBWSxDQUFDLE9BQU87RUFDN0IsWUFBQSxNQUFNLEVBQUUsYUFBYTtFQUN0QixTQUFBLEVBQ0QsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNO1dBQ3ZCO0VBQ0QsUUFBQSxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFBLDJDQUFBLENBQTZDLENBQUM7O1dBQ3JFO1VBQ0osTUFBTSxDQUFDLFdBQVcsQ0FDakI7RUFDRSxZQUFBLElBQUksRUFBRSw2QkFBNkI7RUFDbkMsWUFBQSxNQUFNLEVBQUUsYUFBYTs7O0VBR3RCLFNBQUEsRUFDRCxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FDdkI7RUFDRCxRQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxhQUFhLENBQUEsNkVBQUEsQ0FBK0UsQ0FBQzs7RUFFaEg7RUFFQTtFQUNBLFNBQVMsV0FBVyxHQUFBO0VBQ2hCLElBQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLGFBQWEsQ0FBQSx5Q0FBQSxDQUEyQyxDQUFDO0VBQ3hFLElBQUEsK0JBQStCLEVBQUU7RUFDckM7RUFFQTtFQUNBO0VBQ0EsSUFBSSxRQUFRLENBQUMsVUFBVSxLQUFLLGFBQWEsSUFBSSxRQUFRLENBQUMsVUFBVSxLQUFLLFVBQVUsRUFBRTtNQUM3RSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUcsRUFBQSxhQUFhLENBQTZCLDBCQUFBLEVBQUEsUUFBUSxDQUFDLFVBQVUsQ0FBZ0QsOENBQUEsQ0FBQSxDQUFDO0VBQzdILElBQUEsVUFBVSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUM7RUFDaEM7T0FBTztFQUNILElBQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLGFBQWEsQ0FBQSx3RUFBQSxDQUEwRSxDQUFDO0VBQ3ZHLElBQUEsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLE1BQUs7RUFDL0MsUUFBQSxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFBLDJFQUFBLENBQTZFLENBQUM7RUFDMUcsUUFBQSxVQUFVLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQztFQUNoQyxLQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUM7RUFDdEI7Ozs7OzsifQ==
